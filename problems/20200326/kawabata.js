const BOARD=[
  ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
  ["*","S","*"," ","*"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","*"],
  ["*"," ","*"," ","*"," "," ","*"," "," ","*","*","*","*","*","*","*","*","*","*","*","*","*"," "," ","*"],
  ["*"," ","*"," "," "," ","*"," "," "," "," ","*","*","*","*","*","*","*","*","*","*","*","*"," "," ","*"],
  ["*"," "," "," "," ","*"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","*"],
  ["*","*","*","*","*","*","*","*","*","*","*","*","*","*"," ","*","*","*","*","*","*","*","*","*","*","*"],
  ["*"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","*"],
  ["*","*"," ","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
  ["*"," "," "," "," "," "," ","*"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","G"," "," ","*"],
  ["*"," "," ","*"," "," "," "," "," "," ","*","*","*","*","*","*","*","*","*","*","*"," ","*"," "," ","*"],
  ["*"," "," "," "," ","*"," "," "," "," "," "," "," "," ","*","*","*","*","*","*","*"," ","*"," "," ","*"],
  ["*"," "," "," "," "," "," "," ","*"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","*"],
  ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
];

let startPos;
let goalPos;
for (let y = 0; y < BOARD.length; y++) {
  const cells = BOARD[y];
  for (let x = 0; x < cells.length; x++) {
    const cell = cells[x];
    if (cell === "S") {
      startPos = [x,y];
    }
    if (cell === "G") {
      goalPos = [x,y];
    }
    if (startPos && goalPos) {
      break;
    }
  }
  if (startPos && goalPos) {
    break;
  }
}
console.log(startPos, goalPos);

function canGoCells(pos, board) {
  const x = pos[0];
  const y = pos[1];
  const res = [];
  if (board[y-1][x] === " ") {
    res.push([x,y-1])
  }
  if (board[y][x-1] === " ") {
    res.push([x-1,y])
  }
  if (board[y+1][x] === " ") {
    res.push([x,y+1])
  }
  if (board[y][x+1] === " ") {
    res.push([x+1,y])
  }
  return res;
}

let minCost = Number.MAX_SAFE_INTEGER;
const results = [];

function go(pos, board, cost) {
  const nexts = canGoCells(pos, board);
  const copied = board.map(row => row.concat());
  const x = pos[0];
  const y = pos[1];
  copied[y][x] = "$";
  nexts.forEach(next => {
    if (next === "G") {
      results.push({copied, cost});
    } else {
      go(next, copied, cost + 1);
    }
  });
}
go(startPos, BOARD, 0);
console.log("aaa", results);
